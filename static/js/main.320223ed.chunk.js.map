{"version":3,"sources":["assets/icons/red.png","assets/icons/black.png","assets/icons/blue.png","assets/icons/white.png","assets/icons/green.png","component/InputText.tsx","component/CounterButton.tsx","component/DeckColor.component.tsx","component/LifeCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","InputText","useState","inputValue","setInputValue","className","type","value","onFocus","onBlur","onChange","e","target","onTouchStart","CounterButton","symbol","updateValue","setValueAnimation","onClick","DeckColorComponent","setDeckColor","isColorOptionsOpened","setIsColorOptionsOpened","manaDecks","colorIcon","redIcon","color","blueIcon","blackIcon","whiteIcon","greenIcon","map","manaDeck","key","src","alt","LifeCounter","counterValue","setConterValue","valueAnimation","deckColor","RED","BLUE","BLACK","WHITE","GREEN","onAnimationEnd","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,8IC0B5BC,EAxBG,WAChB,IADsB,EAGcC,mBAFR,iBADN,mBAGfC,EAHe,KAGHC,EAHG,KAWtB,OACE,2BACEC,UAAU,kBACVC,KAAK,OACLC,MAAOJ,EACPK,QAAS,kBAAMJ,EAAc,KAC7BK,OAAQ,WAXI,KAWgBN,GAV5BC,EANwB,kBAiBxBM,SAAU,SAACC,GAAD,OAAOP,EAAcO,EAAEC,OAAOL,QACxCM,aAAc,gBCMLC,EAnBoC,SAAC,GAI7C,IAHLC,EAGI,EAHJA,OACAC,EAEI,EAFJA,YACAC,EACI,EADJA,kBAEA,OACE,4BACEZ,UAAU,0BACVa,QAAS,WACPF,IACAC,KAEFJ,aAAc,cAEbE,I,gFCqCQI,EAhD+C,SAAC,GAExD,IADLC,EACI,EADJA,aACI,EACoDlB,oBAAS,GAD7D,mBACGmB,EADH,KACyBC,EADzB,KAEEC,EAAY,CAChB,CACEC,UAAWC,IACXC,MAAO,OAET,CACEF,UAAWG,IACXD,MAAO,QAET,CACEF,UAAWI,IACXF,MAAO,SAET,CACEF,UAAWK,IACXH,MAAO,SAET,CACEF,UAAWM,IACXJ,MAAO,UAGX,OACE,yBAAKrB,UAAU,4BACb,yBACEA,UAAS,yBAAoBgB,EAAuB,WAAa,KAEjE,uBAAGH,QAAS,kBAAMI,GAAyBD,KAA3C,qBAGA,wBAAIhB,UAAU,0BACXkB,EAAUQ,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,EAASN,OAChB,4BAAQR,QAAS,kBAAME,EAAaY,EAASN,SAC3C,yBAAKQ,IAAKF,EAASR,UAAWW,IAAKH,EAASN,iBCC7CU,EA7Ce,WAAO,IAAD,EACKlC,mBAAS,IADd,mBAC3BmC,EAD2B,KACbC,EADa,OAEUpC,mBAAS,IAFnB,mBAE3BqC,EAF2B,KAEXtB,EAFW,OAGAf,mBAAS,IAHT,mBAG3BsC,EAH2B,KAGhBpB,EAHgB,KAiBlC,OACE,yBAAKf,UAAS,qCATuB,CACrCoC,IAAK,aACLC,KAAM,cACNC,MAAO,eACPC,MAAO,eACPC,MAAO,gBAIoDL,KACzD,kBAAC,EAAD,MACA,yBAAKnC,UAAU,oBACb,kBAAC,EAAD,CACEU,OAAO,IACPC,YAAa,kBAAMsB,EAAeD,EAAe,IACjDpB,kBAAmB,kBAAMA,EAAkB,iBAE7C,yBACEZ,UAAS,iCAA4BkC,EAA5B,YACPF,GAAgB,EAAI,SAAW,IAEjCS,eAAgB,kBAAM7B,EAAkB,MAEvCoB,GAEH,kBAAC,EAAD,CACEtB,OAAO,IACPC,YAAa,kBAAMsB,EAAeD,EAAe,IACjDpB,kBAAmB,kBAAMA,EAAkB,kBAG/C,kBAAC,EAAD,CAAoBG,aAAcA,MC/BzB2B,MAXf,WACE,OACE,yBAAK1C,UAAU,iBACb,wBAAIA,UAAU,aAAd,oBACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACf,kBAAC,EAAD,QCGc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.320223ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red.ebf3c29c.png\";","module.exports = __webpack_public_path__ + \"static/media/black.0a4a7c20.png\";","module.exports = __webpack_public_path__ + \"static/media/blue.05b01548.png\";","module.exports = __webpack_public_path__ + \"static/media/white.7e2fd731.png\";","module.exports = __webpack_public_path__ + \"static/media/green.9ed131c9.png\";","import React, { useState } from \"react\";\r\n\r\nconst InputText = () => {\r\n  const PLAYER_NAME: string = \"Player's Name\";\r\n\r\n  const [inputValue, setInputValue] = useState(PLAYER_NAME);\r\n\r\n  const onBlurHandler = (value: string) => {\r\n    if (value === \"\") {\r\n      setInputValue(PLAYER_NAME);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"mtg-player-name\"\r\n      type=\"text\"\r\n      value={inputValue}\r\n      onFocus={() => setInputValue(\"\")}\r\n      onBlur={() => onBlurHandler(inputValue)}\r\n      onChange={(e) => setInputValue(e.target.value)}\r\n      onTouchStart={() => {}}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputText;\r\n","import React from \"react\";\r\n\r\ntype CounterButtonType = {\r\n  symbol: string;\r\n  updateValue: () => void;\r\n  setValueAnimation: () => void;\r\n};\r\n\r\nconst CounterButton: React.FC<CounterButtonType> = ({\r\n  symbol,\r\n  updateValue,\r\n  setValueAnimation,\r\n}) => {\r\n  return (\r\n    <button\r\n      className=\"mtg-life-counter-button\"\r\n      onClick={() => {\r\n        updateValue();\r\n        setValueAnimation();\r\n      }}\r\n      onTouchStart={() => {}}\r\n    >\r\n      {symbol}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CounterButton;\r\n","import React, { useState } from \"react\";\r\nimport redIcon from \"../assets/icons/red.png\";\r\nimport blackIcon from \"../assets/icons/black.png\";\r\nimport blueIcon from \"../assets/icons/blue.png\";\r\nimport whiteIcon from \"../assets/icons/white.png\";\r\nimport greenIcon from \"../assets/icons/green.png\";\r\n\r\ntype DeckColorComponentProps = {\r\n  setDeckColor: (color: string) => void;\r\n};\r\n\r\nconst DeckColorComponent: React.FC<DeckColorComponentProps> = ({\r\n  setDeckColor,\r\n}) => {\r\n  const [isColorOptionsOpened, setIsColorOptionsOpened] = useState(false);\r\n  const manaDecks = [\r\n    {\r\n      colorIcon: redIcon,\r\n      color: \"RED\",\r\n    },\r\n    {\r\n      colorIcon: blueIcon,\r\n      color: \"BLUE\",\r\n    },\r\n    {\r\n      colorIcon: blackIcon,\r\n      color: \"BLACK\",\r\n    },\r\n    {\r\n      colorIcon: whiteIcon,\r\n      color: \"WHITE\",\r\n    },\r\n    {\r\n      colorIcon: greenIcon,\r\n      color: \"GREEN\",\r\n    },\r\n  ];\r\n  return (\r\n    <div className=\"mtg-deck-color-container\">\r\n      <div\r\n        className={`mtg-deck-color ${isColorOptionsOpened ? \"--opened\" : \"\"}`}\r\n      >\r\n        <p onClick={() => setIsColorOptionsOpened(!isColorOptionsOpened)}>\r\n          Change deck color\r\n        </p>\r\n        <ul className=\"mtg-deck-color-options\">\r\n          {manaDecks.map((manaDeck) => (\r\n            <li key={manaDeck.color}>\r\n              <button onClick={() => setDeckColor(manaDeck.color)}>\r\n                <img src={manaDeck.colorIcon} alt={manaDeck.color} />\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeckColorComponent;\r\n","import React, { useState } from \"react\";\r\nimport InputText from \"./InputText\";\r\nimport CounterButton from \"./CounterButton\";\r\nimport DeckColorComponent from \"./DeckColor.component\";\r\n\r\nconst LifeCounter: React.FC = () => {\r\n  const [counterValue, setConterValue] = useState(20);\r\n  const [valueAnimation, setValueAnimation] = useState(\"\");\r\n  const [deckColor, setDeckColor] = useState(\"\");\r\n\r\n  type colorsObjectType = {\r\n    [key: string]: string;\r\n  };\r\n\r\n  const colorsObject: colorsObjectType = {\r\n    RED: \"--red-deck\",\r\n    BLUE: \"--blue-deck\",\r\n    BLACK: \"--black-deck\",\r\n    WHITE: \"--white-deck\",\r\n    GREEN: \"--green-deck\",\r\n  };\r\n\r\n  return (\r\n    <div className={`mtg-life-counter-container ${colorsObject[deckColor]}`}>\r\n      <InputText />\r\n      <div className=\"mtg-life-counter\">\r\n        <CounterButton\r\n          symbol=\"-\"\r\n          updateValue={() => setConterValue(counterValue - 1)}\r\n          setValueAnimation={() => setValueAnimation(\"--decrease\")}\r\n        />\r\n        <div\r\n          className={`mtg-life-counter-value ${valueAnimation} ${\r\n            counterValue <= 0 ? \"--lost\" : \"\"\r\n          }`}\r\n          onAnimationEnd={() => setValueAnimation(\"\")}\r\n        >\r\n          {counterValue}\r\n        </div>\r\n        <CounterButton\r\n          symbol=\"+\"\r\n          updateValue={() => setConterValue(counterValue + 1)}\r\n          setValueAnimation={() => setValueAnimation(\"--increase\")}\r\n        />\r\n      </div>\r\n      <DeckColorComponent setDeckColor={setDeckColor} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LifeCounter;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport LifeCounter from \"./component/LifeCounter\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"mtg-container\">\r\n      <h1 className=\"mtg-title\">MTG Life Counter</h1>\r\n      <LifeCounter />\r\n      <div className=\"mtg-divisor\" />\r\n      <LifeCounter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}